GameBits Dev Journal - Doug Leary 
=================================
High Level TO DO:
  - Scheme for multiple repositories or namespaces
  - Caching scheme - fetch from storage only when necessary, discard oldest items first 
  - Plug-in scheme for data providers, game-specific components
  - Providers - xml, MySql, etc.

Notes
----------
Additional rolls within an item: 
- scroll with 2 spells, level 1-4
- scroll with 3 spells, level 1-8 for mages or 1-6 for clerics

In AD&D 1E table II.B (Scrolls) 30% of all spell scrolls are clerical; 25% of those are druidical. Of the 70% that are magic-user scrolls, 10% are illusionist. GameBits table roller currently has no way to handle this logic. 

In terms of a RollableTable row item, GameBits does not yet implement percentages in this way. Percentage on an ItemRoll indicates a possibility of rolling or not rolling the item. There is no feature to select an item from a group based on a percentage. 
  There is a clumsy workaround: do a TableRoll on a set of small tables containing the possible forms of the item. 
  Example: to roll a 3-spell scroll you could use a main table that determines whether it's a clerical or magic-user scroll, a clerical subtable to pick clerical or druidic, and a magic-user subtable to pick magic-user or illusionist. Each result would then roll 3 spells on a spell list. 

---------------------------

<TableRoll TableName="Scroll of 3 Spells" />

// main table chooses clerical or magic-user 
<Table TableName="Scroll of 3 Spells">
	<DieRoll Sides="100" />
	<Row HighRoll="30">
		<TableRoll TableName="Clerical Scrolls of 3 Spells" />
	<Row>
		<TableRoll TableName="Magical Scrolls of 3 Spells" />
	</Row>
</Table>

// secondary tables 
<Table TableName="Clerical Scrolls of 3 Spells">
	<DieRoll Sides="100" />
	<Row HighRoll="25">
		<TableRoll TableName="Druid Spells" Rolls="3" />
	</Row>
	<Row>
		<TableRoll TableName="Cleric Spells" Rolls="3" />
	</Row>
</Table>

<Table TableName="Magical Scrolls of 3 Spells">
	<DieRoll Sides="100" />
	<Row HighRoll="10">
		<TableRoll TableName="Illusionist Spells" Rolls="3" />
	</Row>
	<Row>
		<TableRoll TableName="Magic-User Spells" Rolls="3" />
	</Row>
</Table>

---------------------------

Problems: 
- The value 3 must be hard-coded in the tables. A set of these tables would have to exist for each desired spell-count. 
- Each set of tables for a given spell count would have to be replicated for any specific spell level range desired. 
- The end result would be just a list of spells. There is no way to format multiple results as one item, as in: "Scroll with 3 Clerical Spells: Spell1, Spell2, Spell3".

The same problem exists for generating a magic item that has multiple powers. 

Need a way to specify performing a TableRoll a number of times. 

=======================================
11-21-2016

It seems like the above functionality belongs at the GameObject/Instance level. 
A Spell Scroll would be a GameObject with a spec to roll up spells, and would Resolve to a GameObjectInstance with a list of specific spells. 
A GameObject should be able to contain a list of GameObjects, and an Instance to contain a list of Instances. A scroll with 3 spells should Resolve to a scroll instance containing 3 spell instances.

-- Rejected scheme: Add a Parent property to the List object. A magic amulet with 3 magical effects would be a list of the effects with a Parent that's an amulet. A scroll with 3 spells would be a list of spells and a container that's a Scroll. 
Maybe a creature could even be a list of attributes (AC, HP etc.) with a container that specifies the type of creature. 
Parent might be a better name than Container, because we're talking about one object being more of an attribute of another. 
- would need circular reference detection
Eventually we will have to deal with actual containment (e.g. gems in a sack in a chest). 

-- Final scheme: GameObject and GameObjectInstance should have a Contents list, possibly an ItemList.
A magic amulet with 3 magical effects would be a GameObject whose Contents list contains 3 spell GameObjects.
An instance of that amulet would be a GameObjectInstance whose Contents list contains 3 spell GameObjectInstances.
The GameObject's Resolve method would return a GameObjectInstance whose Contents contains the resolved Contents of the GameObject. 

--------------
11-23-2-16 
Contents is now implemented as an ItemList in GameObject and GameObjectInstance; seems to work fine.

Syntax: 
<GameObject>
  <Contains>
    <GameObject />
    <GameObject />
	<TableRoll />
	... whatever
  </Contains> 
</GameObject>

Example spell scroll:
  <Table TableName="III.B. Scrolls">
    <DieRoll Sides="100" />
    <Row HighRoll="10">
      <GameObject Name="Scroll, 2 spells, level 1-4">
        <Contains>
          <TableRoll TableName="Magic-User Spells Level 1-4" Rolls="2" />
        </Contains>
      </GameObject>
    </Row>
	...
  </Table>

  Output:
  Table row:
    Scroll, 2 spells, level 1-4 (Roll twice on Magic-User Spells Level 1-4)
  Results (3 rolls):
    Scroll, 2 spells, level 1-4 (2 Fireballs)
	Scroll, 2 spells, level 1-4 (2 Stinking Clouds)
    Scroll, 2 spells, level 1-4 (Enlarge; Magic Missiles)

This works but is a cumbersome way to implement real game objects. The above example requires a dedicated table "Magic-User Spells Level 1-4". 
A better way would be to specify 4 master lists of spell tables, pick one of them by rolling d4, then roll on that table. Repeat 2x. 
Syntax needs to convey Roll on one of the following tables {table1, table2...} 2 times. 
Single table:
  <TableRoll TableName="Monsters Table 2" Rolls="2" />
Multiple tables: 
  <TableRoll Rolls="2">
    <Table>Magic-User Spells Level 1</Table>
    <Table>Magic-User Spells Level 2</Table>
    <Table>Magic-User Spells Level 3</Table>
    <Table>Magic-User Spells Level 4</Table>
  </TableRoll>



-------------------------
Pluralization Thoughts

Note that when the same spell occurs multiple times in the results the spell name is pluralized and count is applied as with other objects. 
Standard D&D notation would be "Name of Spell (x2)".

Pluralization should accept count and template params, and handle count=1 by not pluralizing.
Game-specific items like spells need their own pluralization templates. 
I have not worked on how to implement game-specific objects yet. A GameObject is still just a string (Name) at this point, but the goal was always to enable user-designed game objects without coding. 
Custom pluralization would be part of this spec.

------------------------------------------
Ideas for Game-Specific Objects:

<GameObjectType TypeName="Spell" Singular="{Name}" Plural="{Name} (x{Count})">
  <Name />
  <Type />
  <Level />
  <Description />
  <AreaOfEffect />
  ...
</GameObjectType>

This would make the following legal:

<Spell Name="Fireball" Type="Magic-User" Level="3" etc />

The XML parsing logic would first check for known tag names, then defined types. 
When it finds a defined type name such as "Spell" it parses Name, Type, Level, etc. according to rules defined in those attribute definitions. 

=======================================

12-31-2016

Need a syntax for specifying a ListRoll in a RollableTable;
Example:
	<ListRoll TableName="Monster Treasure" Key="D" Rolls="2" />.

Also need a scheme for Treasure Type in a Monster description;
Example:
	Treasure Type "A,C,2H" should generate 3 ListRolls:
		Key="A", Rolls=1
		Key="C", Rolls=1
		Key="H", Rolls=2

Come to think of it, RollableTable and RollableList should both be descendants of an abstract type ResolvableTable.

	ResolvableTable would have a Dictionary<T, string> property and an abstract method GetItem(<T> keyValue).

	RollableList would use Dictionary<string, string>
	RollableTable would use Dictionary<int, string>

	RollableList's GetItem method would use the base Dictionary's string match.
	RollableTable's GetItem would sequentially find the first item whose key is >= keyValue.

The original reason for implementing RollableTable as a DataTable containing RollableTableRows was
to make it easily bindable to ASP.Net web controls, which I am not using anymore. 
NOTE: The RollableTableRow.Table prop would not be available if we convert to a Dictionary. 
  There might be code that depends on this. 

----------------
1-5-2017
Tracking down problems in RollableList Resolve. 
Some resolved items are disappearing from the final returned list. 
In the TreasureTypes RollableList each row (Treasure Type A, B, etc.) is an ItemList containing only ItemRolls.
Wherever a TableRoll is called for it is wrapped in an ItemRoll so it can be performed a random # of times.
In some cases TableRoll results are being Resolved that do not appear in the final results. 
Could be that the last TableRoll result is included, I'm not sure. 
- This would make sense if the ItemRoll result list is being reinitialized for every TableRoll instead of once for the whole ItemRoll. 

