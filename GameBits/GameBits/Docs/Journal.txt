GameBits Dev Journal - Doug Leary 
=================================
High Level TO DO:
  - Scheme for multiple repositories or namespaces
  - Caching scheme - fetch from storage only when necessary, discard oldest items first 
  - Plug-in scheme for data providers, game-specific components
  - Providers - xml, MySql, etc.

Notes
----------
Additional rolls within an item: 
- scroll with 2 spells, level 1-4
- scroll with 3 spells, level 1-8 for mages or 1-6 for clerics

In AD&D 1E table II.B (Scrolls) 30% of all spell scrolls are clerical; 25% of those are druidical. Of the 70% that are magic-user scrolls, 10% are illusionist. GameBits table roller currently has no way to handle this logic. 

In terms of a RollableTable row item, GameBits does not yet implement percentages in this way. Percentage on an ItemRoll indicates a possibility of rolling or not rolling the item. There is no feature to select an item from a group based on a percentage. 
  There is a clumsy workaround: do a TableRoll on a set of small tables containing the possible forms of the item. 
  Example: to roll a 3-spell scroll you could use a main table that determines whether it's a clerical or magic-user scroll, a clerical subtable to pick clerical or druidic, and a magic-user subtable to pick magic-user or illusionist. Each result would then roll 3 spells on a spell list. 

---------------------------

<TableRoll TableName="Scroll of 3 Spells" />

// main table chooses clerical or magic-user 
<Table TableName="Scroll of 3 Spells">
	<DieRoll Sides="100" />
	<Row HighRoll="30">
		<TableRoll TableName="Clerical Scrolls of 3 Spells" />
	<Row>
		<TableRoll TableName="Magical Scrolls of 3 Spells" />
	</Row>
</Table>

// secondary tables 
<Table TableName="Clerical Scrolls of 3 Spells">
	<DieRoll Sides="100" />
	<Row HighRoll="25">
		<TableRoll TableName="Druid Spells" Rolls="3" />
	</Row>
	<Row>
		<TableRoll TableName="Cleric Spells" Rolls="3" />
	</Row>
</Table>

<Table TableName="Magical Scrolls of 3 Spells">
	<DieRoll Sides="100" />
	<Row HighRoll="10">
		<TableRoll TableName="Illusionist Spells" Rolls="3" />
	</Row>
	<Row>
		<TableRoll TableName="Magic-User Spells" Rolls="3" />
	</Row>
</Table>

---------------------------

Problems: 
- The value 3 must be hard-coded in the tables. A set of these tables would have to exist for each desired spell-count. 
- Each set of tables for a given spell count would have to be replicated for any specific spell level range desired. 
- The end result would be just a list of spells. There is no way to format multiple results as one item, as in: "Scroll with 3 Clerical Spells: Spell1, Spell2, Spell3".

The same problem exists for generating a magic item that has multiple powers. 

Need a way to specify performing a TableRoll a number of times. 

=======================================
11-21-2016

It seems like the above functionality belongs at the GameObject/Instance level. 
A Spell Scroll would be a GameObject with a spec to roll up spells, and would Resolve to a GameObjectInstance with a list of specific spells. 
A GameObject should be able to contain a list of GameObjects, and an Instance to contain a list of Instances. A scroll with 3 spells should Resolve to a scroll instance containing 3 spell instances.

-- Rejected scheme: Add a Parent property to the List object. A magic amulet with 3 magical effects would be a list of the effects with a Parent that's an amulet. A scroll with 3 spells would be a list of spells and a container that's a Scroll. 
Maybe a creature could even be a list of attributes (AC, HP etc.) with a container that specifies the type of creature. 
Parent might be a better name than Container, because we're talking about one object being more of an attribute of another. 
- would need circular reference detection
Eventually we will have to deal with actual containment (e.g. gems in a sack in a chest). 

-- Final scheme: GameObject and GameObjectInstance should have a Contents list, possibly an ItemList.
A magic amulet with 3 magical effects would be a GameObject whose Contents list contains 3 spell GameObjects.
An instance of that amulet would be a GameObjectInstance whose Contents list contains 3 spell GameObjectInstances.
The GameObject's Resolve method would return a GameObjectInstance whose Contents contains the resolved Contents of the GameObject. 

--------------
11-23-2-16 
Contents is now implemented as an ItemList in GameObject and GameObjectInstance; seems to work fine.

Syntax: 
<GameObject>
  <Contains>
    <GameObject />
    <GameObject />
	<TableRoll />
	... whatever
  </Contains> 
</GameObject>

Example spell scroll:
  <Table TableName="III.B. Scrolls">
    <DieRoll Sides="100" />
    <Row HighRoll="10">
      <GameObject Name="Scroll, 2 spells, level 1-4">
        <Contains>
          <TableRoll TableName="Magic-User Spells Level 1-4" Rolls="2" />
        </Contains>
      </GameObject>
    </Row>
	...
  </Table>

  Output:
  Table row:
    Scroll, 2 spells, level 1-4 (Roll twice on Magic-User Spells Level 1-4)
  Results (3 rolls):
    Scroll, 2 spells, level 1-4 (2 Fireballs)
	Scroll, 2 spells, level 1-4 (2 Stinking Clouds)
    Scroll, 2 spells, level 1-4 (Enlarge; Magic Missiles)

This works but is a cumbersome way to implement real game objects. The above example requires a dedicated table "Magic-User Spells Level 1-4". 
A better way would be to specify 4 master lists of spell tables, pick one of them by rolling d4, then roll on that table. Repeat 2x. 
Syntax needs to convey Roll on one of the following tables {table1, table2...} 2 times. 
Single table:
  <TableRoll TableName="Monsters Table 2" Rolls="2" />
Multiple tables: 
  <TableRoll Rolls="2">
    <Table>Magic-User Spells Level 1</Table>
    <Table>Magic-User Spells Level 2</Table>
    <Table>Magic-User Spells Level 3</Table>
    <Table>Magic-User Spells Level 4</Table>
  </TableRoll>

-------------------------
Pluralization Thoughts

Note that when the same spell occurs multiple times in the results the spell name is pluralized and count is applied as with other objects. 
Standard D&D notation would be "Name of Spell (x2)".

Pluralization should accept count and template params, and handle count=1 by not pluralizing.
Game-specific items like spells need their own pluralization templates. 
I have not worked on how to implement game-specific objects yet. A GameObject is still just a string (Name) at this point, but the goal was always to enable user-designed game objects without coding. 
Custom pluralization would be part of this spec.

------------------------------------------
Ideas for Game-Specific Objects:

<GameObjectType TypeName="Spell" Singular="{Name}" Plural="{Name} (x{Count})">
  <Name />
  <Type />
  <Level />
  <Description />
  <AreaOfEffect />
  ...
</GameObjectType>

This would make the following legal:

<Spell Name="Fireball" Type="Magic-User" Level="3" etc />

The XML parsing logic would first check for known tag names, then defined types. 
When it finds a defined type name such as "Spell" it parses Name, Type, Level, etc. according to rules defined in those attribute definitions. 

=======================================

12-31-2016

Need a syntax for specifying a ListRoll in a RollableTable;
Example:
	<ListRoll TableName="Monster Treasure" Key="D" Rolls="2" />.

Also need a scheme for Treasure Type in a Monster description;
Example:
	Treasure Type "A,C,2H" should generate 3 ListRolls:
		Key="A", Rolls=1
		Key="C", Rolls=1
		Key="H", Rolls=2

Come to think of it, RollableTable and RollableList should both be descendants of an abstract type ResolvableDictionary.

	ResolvableDictionary<T> where T is the key type (int, string) has a Dictionary<T, string> prop and an abstract method GetItem(T keyValue).

	RollableItem class (replaces RollableTableRow) has props int LowRoll, int HighRoll, IResolver Item
	RollableTable uses Dictionary<int, RollableItem>
	RollableTable.GetItem sequentially finds the first item whose key is >= keyValue.

	RollableList uses Dictionary<string, IResolver>
	RollableList.GetItem uses the base Dictionary's string match.

The original reason for implementing RollableTable as a DataTable containing RollableTableRows was
to make it easily bindable to ASP.Net web controls, which I am not using anymore. 
NOTE: The RollableTableRow.Table prop would not be available if we convert to a Dictionary. 
  There might be code that depends on this. 

Keeping LowRoll as a property: 
Even though HighRoll is the only value we need to determine which item to select for a given roll result, we need each row's LowRoll for display purposes.
For a row object to determine its own LowRoll value by adding 1 to the previous roll's HighRoll, it would need a pointer to the previous row or to the containing table. 
This would defeat the purpose of eliminating the LowRoll prop. 

----------------
1-5-2017
Tracking down problems in RollableList Resolve. 
Some resolved items might be disappearing from the final returned list. 
In the TreasureTypes RollableList each row (Treasure Type A, B, etc.) is an ItemList containing only ItemRolls.
Wherever a TableRoll is called for it is wrapped in an ItemRoll so it can be performed a random # of times.
In some cases it looks like TableRoll results are being Resolved but do not appear in the final results. 
Could be that only the last TableRoll result is included, I'm not sure. 
- This would make sense if the ItemRoll result list is being reinitialized for every TableRoll instead of once for the whole ItemRoll. 

-------------
1-10-2017

-- D&D-specific note: when generating a hoard of gems, making an independent roll for each gems results in many gem types.
Rolling them in groups creates more realistic results, using the die multiplier as the number of gem types. 
Example: 3d10 gems can be rolled by selecting 3 gem types and rolling d10 for each, to give a result like 6 emeralde, 3 rubies and 4 diamonds.
This might also be the preferable method of rolling an encounter with creatures of multiple random types.
There could be one syntax for rolling groups and another for rolling independent individuals. 
I think groups should be the default method for an ItemRoll with a die multiplier. 

-- Nested TableRolls incur superfluous Resolves. 
TableRoll.Resolve generates an Item and returns Item.Resolve().
When TableRolls are nested the deepest one eventually generates a GameObjectItem, which it resolves and returns.
Each TableRoll nested above it Resolves this returned result again. 

-- See 1/5/2015 notes -- no resolved results are missing; problem was in my diagnostics.

--------------
1-22-2017

- In TreasureTypes.aspx a sporadic error occurs in TreasureService.asmx/GetADnD1ETreasureByType:

    ItemList list = (ItemList)(List.Resolve(RemoveSpaces(TreasureTypes)));
    string strList = list.ToString(ItemList.Format.Compressed).Trim();    

Occasionally list.ToString fails, returning a nonspecific error to the ajax call, but debug does not trap the error when this line is executed. 

ItemList.ToString() compresses the list, converting multiple occurrences of an item to a single item with a count.
To do this it creates a temporary sorted list; if an item already exists it increments the item's counter. 
When the list contains another ItemList, the Compare function used to build the sorted list calls ItemList.ToString() to compare it to every other item, which requires the inner ItemList to iterate its own items. 
I don't know where the failure is occurring, but it occurs more often when the outer ItemList contains more simple objects. 
--- Ideas
- When an ItemList is added to another ItemList, add the inner list items separately so the outer list does not contain an ItemList. 
- ToString() could operate uncompressed. This eliminates the SortedList problem.
  An explicit Normalize() method could construct an intermediate SortedList, walking all structures in the list and returning a single flattened normalized list of GameObjectInstances. 

---------------
1-26-2017

Issue: 
When an ItemList is part of a result list, sorting the results invokes CompareTo on each, 
which calls ToString multiple times on each item, resulting in excessive iteration of the inner ItemList. 
ItemLists can be nested arbitrarily deep, resulting in a stack overrun error. 

Ideas:
- Add a ResolverInstance class with a Count and a pointer to an IResolver.
  Make GameObjectInstance a descendant of ResolverInstance. Or could ResolverInstance be a generic? 
  Pluralization: base pluralizer of ResolverInstance would do nothing; GameObjectInstance would do custom pluralization using GameObject.Plural. 
  ItemList.CompareTo would compare only its first item against the other object, eliminating the runaway iteration problem. 

-----------------
2-7-2017

I've been working to make RollableTable and RollableList more type-compatible as described above in 12-31-2016 notes. 
Instead of ResolvableDictionary I created an abstract ResolvableList class with a private Dictionary<KeyType, IResolver>.
Its only descendant right now is KeyedList (formerly RollableList), which implements a Dictionary<string, IResolver>.
Next I will make RollableTable a descendant of ResolvableList using Dictionary<int, IResolver>.

Minor but pervasive tweaks:

- Base interface is now IResolvable, which has a Resolve method.
- IResolver is IResolvable and IComparable. 
  ResolvableList class is now an interface IResolvableList.
  IResolvableList is only IResolvable, because IResolvableList types (KeyedList and RollableTable) are not meant to be members of other lists. 
  Since they are both of type Dictionary<KeyType, IResolver>, any item in them is guaranteed to be IComparable. 
  ItemList, on the other hand, is designed to be a member of another list, so it implements IResolver.

---------------------
2/9/2017

ItemList now implements IResolvableList - its type is still List<IResolver>, but now it has a GetItem method.
Now all lists implement IResolvableList.
Added KeyList.Roll and ItemList.Roll; each randomly selects an item and returns it resolved.
Created an IRollable interface with only a Roll method, implemented by all 3 lists. 
Itemlist and KeyedList generate a DieRoll with Sides = count of list items. 
Now all lists are rollable. 
ItemList is the only list type that implements IResolver; 
  since ItemList can be a result of another object's Resolve, we can now generate a random list that is rollable. 
  For example you could generate an encounter table by picking 20 swamp creatures.
  Later it shouls be possible to use app-specific data to do more interesting things. Examples:
    - generate an ItemRoll for a Monster using the Monster's # Occurring to create the die roll
	- generate a RollableTable using Frequency of a Monster to determine its die roll range. 

-----------------
2/11/2017

Inspiration - Instead of 3 types of lists use one list structure and attach a different index to each. 
  List type      Index
  ItemList       none
  KeyedList      Key values
  RollableTable  HighRoll values

For RollableTable we would eliminate the table's DieRoll and use the last item's HighRoll value to generate a 1dN DieRoll on the fly.
This would remove the ability to use a multi-die roll, but I don't think that's a big loss. 

12/12/17

TO DO: add syntax for specifying a KeyedListRoll in a RollableTable:
    <TableRoll TableName = "Monster Treasure" Key="D" Rolls="2" />.

When Key is specified, call Roll(Key), else call Roll() which will randomly select a key.
Then there is no need to differentiate between KeyedList and RollableTable. 

Also need a string designator for a Treasure Type in a Monster description;
Example:
    "A,C,2H" would generate 3 KeyedListRolls: (Key="A", Rolls=1), (Key="C", Rolls=1), (Key="H", Roll=2);

Come to think of it, RollableTable and KeyedList should both be descendants of an abstract type ResolvableTable.
ResolvableTable would have a Dictionary<T, string> and an abstract method GetItem(<T> keyValue).
KeyedList would use Dictionary<string, string>
RollableTable would use Dictionary<int, string>
KeyedList's GetItem method would use the base Dictionary's string match.
RollableTable's GetItem would sequentially find the first item whose key is >= keyValue.

The original reason for implementing RollableTable as a DataTable containing RollableTableRows was
to make it easily bindable to ASP.Net web controls; with AJAX/JSON/SOA this is not a design issue anymore.

