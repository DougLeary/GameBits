NOTE: This document is obsolete and has been superseded by the GameBits Wiki. 
********************************************************************************

The process of randomly generating game elements such as monsters, treasures and terrain, involves rolling on multiple tables 
that reference each other. GameBits classes are designed for creating such tables and chaining them together. 

The key element is the IResolver interface. It has only one method: Resolve(), which returns an IResolver. 
The Resolve method's job is either to return an object (or list of objects) that is fully resolved, i.e. that needs no further die rolls, 
or to return the results of calling the Resolve methods of constituent objects. The final results will be a GameObjectInstance (or list of them). 

IResolver is implemented by two base classes and their descendants:
  - GameObject is the base class for all in-game objects such as Creatures and Spells. 
    GameObject.Resolve() returns the object itself.
  - TableRoll is a template for rolling on a RollableTable; for example: roll twice on table X ignoring results above 18.
    TableRoll.Resolve() returns the results of the RollableTable's Roll() method.

RollableTable is a custom DataTable that contains IResolvers that are either GameObjects (end results) or TableRolls (instructions to roll further on other tables).
Like any DataTable, RollableTable can be databound to .Net controls such as GridView and Repeater.
RollableTable.Roll() returns the result of the Resolve() method of a randomly selected item.

TableRollResults is a custom ArrayList (for easy databinding) designed to hold one or more results from a Roll() method. 

DieRoll is a utility class whose main purpose is to perform die rolls for the Roll() methods of RollableTables and other objects. 

A random game element is generated by calling a RollableTable's Roll() method, which performs a die roll to randomly select one of the table items and returns a resolved object. A GameObject resolves to itself. A TableRoll resolves by calling its RollableTable's Roll() method, continuing until a GameObject is eventually returned. 

The TableRoll class is a GameObject that performs a roll on a specified RollableTable. You can chain RollableTables together by specifying TableRolls as results in RollableTables. 

Note: In the current version there is no circular reference checking, so it is possible to create an endless loop in which Table A rolls on Table B which rolls on Table A. If two tables mutually reference each other in this way, they should also include other possible results that return GameObjects so the call chain will eventually end. An error could still occur if the call stack gets too large. 



=========================
Some Object Class Details 
=========================

--------------------------------
DieRoll - utility class

Public Properties
  Dice: number of dice to roll
  Sides: number of sides on a die
  Modifier: value to add to total (can be negative)
  Keep: number of best results to keep; e.g. if dice=4 and keep=3, roll 4 dice and keep the highest 3. 

The Roll() method is overloaded, returning either an int for a single roll or a TableRollResults for a multiple roll. 
----TODO: It might be better to create a DieRollResults type for multiple rolls rather than using TableRollResults, because multiple rolls return a set of integers not a set of table roll result items. 

--------------------------------
TableRollResults : ArrayList
  A customized ArrayList containing integer results from a series of die rolls.
  Use ArrayList methods to add results, remove, sort etc. 
  
Public Properties
  Total
    total of all rolls
  int Highest
    highest single roll result in the group
  int Lowest
    lowest single roll result in the group
  int Average
    average roll result, rounded to nearest integer
  
Public enums
  SortOrder { Ascending, Descending }
  
Public Methods
  void KeepBest(int KeepHowMany)
    after calling, the list contains only the specified number of best results.
    The difference between the TableRollResults.KeepBest() method and the DieRoll.Keep property is that DieRoll.Keep specifies how many dice DieRoll.Roll() should keep for its result, and KeepBest() keeps the best of a series of DieRoll.Roll() results. TableRollResults Sorted(SortOrder sortOrder)
    returns a copy of the list sorted in the specified order
  TableRollResults Sorted()
    returns a copy of the list sorted in ascending order
  string ToString()
    returns a comma-separated list of results
  
    
